SET 'auto.offset.reset'='earliest';

CREATE STREAM STOCK_PRICES
(
    price DOUBLE,
    symbol VARCHAR,
    timestamp BIGINT
)
WITH
(
    KAFKA_TOPIC='finnhub_trades',
    VALUE_FORMAT='AVRO',  -- Or AVRO, depending on your data
    TIMESTAMP='timestamp'
);

-- GET LATEST PRICES FOR ALL SYMBOLS --
CREATE STREAM SYMBOLS (
    SYMBOL VARCHAR,
    TIMESTAMP BIGINT
) WITH (
    KAFKA_TOPIC = 'finnhub_company_symbols',
    VALUE_FORMAT = 'AVRO',
    TIMESTAMP = 'timestamp'
);

CREATE TABLE COMPANY_SYMBOLS AS
SELECT
  SYMBOL,
  LATEST_BY_OFFSET(TIMESTAMP) AS MX
FROM SYMBOLS
GROUP BY SYMBOL
EMIT CHANGES;

CREATE TABLE LATEST_PRICES AS
SELECT
    sp.SYMBOL as SYMBOL,
    COALESCE(LATEST_BY_OFFSET(sp.price), CAST(0.0 AS DOUBLE)) AS LAST_PRICE,
    LATEST_BY_OFFSET(TIMESTAMP) AS MX
FROM STOCK_PRICES sp
LEFT JOIN COMPANY_SYMBOLS cs
ON sp.SYMBOL = cs.SYMBOL
GROUP BY sp.SYMBOL
EMIT CHANGES;

----------------------------------------------
-- SELECT
--     sp.SYMBOL as SYMBOL,
--     COALESCE(sp.PRICE, ls.LAST_PRICE) as PRICE,
--     sp.TIMESTAMP
-- FROM STOCK_PRICES sp
-- LEFT JOIN LATEST_PRICES ls
-- ON sp.SYMBOL = ls.SP_SYMBOL
-- EMIT CHANGES;


-- CREATE TABLE STOCK_PRICES_1S AS
-- SELECT
--     sp.SYMBOL,
--     COUNT(*) AS COUNT,
--     MAX(sp.WINDOWSTART) AS TIMESTAMP,
--     COALESCE(AVG(sp.PRICE), LATEST_BY_OFFSET(ls.LAST_PRICE)) AS AVG_PRICE
-- FROM STOCK_PRICES sp
-- LEFT JOIN LATEST_PRICES ls
-- ON sp.SYMBOL = ls.SP_SYMBOL
-- WINDOW TUMBLING (SIZE 1 SECONDS)
-- GROUP BY sp.SYMBOL
-- EMIT FINAL;

CREATE TABLE STOCK_PRICES_1S AS
SELECT
    SYMBOL,
    WINDOWSTART AS TIMESTAMP,
    COUNT(*) AS COUNT,
    AVG(PRICE) AS AVG_PRICE
FROM STOCK_PRICES
WINDOW TUMBLING (SIZE 1 SECONDS)
GROUP BY SYMBOL
EMIT FINAL;

-- SELECT * FROM STOCK_PRICES_1S EMIT CHANGES;

-- DROP TABLE STOCK_PRICES_1S;

CREATE STREAM STOCK_PRICES_1S_STREAM (
    SYMBOL VARCHAR KEY,  -- Explicitly declare SYMBOL as the key
    AVG_PRICE DOUBLE,
    TIMESTAMP BIGINT
) WITH (
    KAFKA_TOPIC = 'STOCK_PRICES_1S',
    VALUE_FORMAT = 'AVRO',
    WINDOW_TYPE = 'TUMBLING',
    WINDOW_SIZE = '1 SECONDS'
);

-- SELECT
--     sp.SYMBOL as SYMBOL,
--     COALESCE(sp.AVG_PRICE, ls.LAST_PRICE) as PRICE,
--     sp.TIMESTAMP as TIMESTAMP
-- FROM STOCK_PRICES_1S_STREAM sp
-- LEFT JOIN LATEST_PRICES ls
-- ON sp.SYMBOL = ls.SP_SYMBOL;

-- SELECT * FROM STOCK_PRICES_1S_STREAM EMIT CHANGES;

-- DROP STREAM STOCK_PRICES_1S_STREAM;


CREATE TABLE STOCK_SUMMARY AS
SELECT
    TIMESTAMP,
    SUM(avg_price) AS total_avg_price,
    COLLECT_LIST(SYMBOL) AS symbols
FROM stock_prices_1s_stream
WINDOW TUMBLING (SIZE 1 SECONDS)
GROUP BY TIMESTAMP
EMIT CHANGES;


CREATE STREAM STOCK_SUMMARY_STREAM (
    TIMESTAMP BIGINT KEY,
    total_avg_price DOUBLE,
    SYMBOLS ARRAY<VARCHAR(STRING)>
) WITH (
    KAFKA_TOPIC = 'STOCK_SUMMARY',
    VALUE_FORMAT = 'AVRO',
    WINDOW_TYPE = 'TUMBLING',
    WINDOW_SIZE = '1 SECONDS'
);

select * from STOCK_SUMMARY_STREAM emit changes

-- SELECT
--     SYMBOL,
--     LATEST_BY_OFFSET(price) AS LAST_PRICE,
--     LATEST_BY_OFFSET(ROWTIME) AS LAST_UPDATE
-- FROM stock_prices
-- GROUP BY SYMBOL
-- EMIT CHANGES;







    -- FORMAT_TIMESTAMP(LATEST_BY_OFFSET(sp.ROWTIME), 'yyyy-MM-dd HH:mm:ss') AS LAST_UPDATE
